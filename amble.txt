Hi ChatGPT. I am building a node/react game, named "Such Kanji". It's intended to be a quick and fun game for learning Japanese Kanji characters.

The game begins like this:

1) The user presses the Continue button at the splash game
2) The user Selects New Game to start a new game.
3) There are ten rounds per game. Each round the correct kanji is displayed at the top (in the blue part). There are also 3 buttons. One of three buttons has a title or label that correctly matches the 'correct kanji'. After the ten rounds a 'game over' screen is presented (currently this is an alert box), and the score (successful answers out of ten rounds) is displayed (this part is also TBD).

What I have described above is working pretty well already in my React Code.

However, there is one problem:  

In each and every round, the answer on the 'correct button' that matches the 'correct kanji' is always the button on the left. It is never the middle or the right button. This is a problem because the user always knows the answer will be on the leftmost button (we don't want this because it makes the game too easy). We want the correct button matching the [blue background's] correct kanji to be in one of the three [left, center, right] locations, chosen randomly by the program.

 Can you make modifications to the files to solve this issue and create a smooth gameplay for the user?


Following is my code base:

Directory Tree:

  |-src
  |  |-components
  |  |-css
  |  |-images

Concatenated Output:

/* ChatGPT Ref: ./src/App.css */
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
/* ChatGPT Ref: ./src/App.js */
import React, { useState } from 'react';
import { Splash, GameOver, KanjiGame } from './components';
import './App.css';

function App() {
  const [showSplash, setShowSplash] = useState(true);
  const [showGameOver, setShowGameOver] = useState(false);

  const handleContinue = () => {
    setShowSplash(false);
  };


return (
  <div className="App">
    {showSplash ? (
      <Splash onContinue={handleContinue} />
    ) : (
      <>
        <KanjiGame onContinue={handleContinue} />
        {showGameOver && <GameOver />}
      </>
    )}
  </div>
);
}

export default App;
/* ChatGPT Ref: ./src/App.test.js */
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
/* ChatGPT Ref: ./src/components/AboutScreen.js */
import React from 'react';
import '../css/AboutScreen.css';

const AboutScreen = () => {
  return (
    <div className="about-screen">
      <h1>About Dogecoin</h1>
      <p>
        Dogecoin is a popular cryptocurrency that was created as a fun and friendly alternative to other digital currencies. It features a unique and adorable Shiba Inu dog logo, which has become an iconic symbol in the crypto community. One of the key benefits of Dogecoin is its ease of use. It offers a simple and straightforward platform for users to send and receive funds, making it accessible to both experienced crypto enthusiasts and newcomers alike.
      </p>
      <p>
        However, Dogecoin is more than just a digital currency. It embodies the spirit of fun and community, with a strong emphasis on helping others. The Dogecoin community has been involved in numerous charitable initiatives and fundraising campaigns, supporting causes such as disaster relief, education, and animal welfare. The hashtag #DoOnlyGoodEveryday has become a rallying cry for Dogecoin enthusiasts, encouraging acts of kindness and generosity. This unique combination of lightheartedness, ease of use, and a focus on doing good has contributed to the widespread popularity of Dogecoin.
      </p>
    </div>
  );
};

export default AboutScreen;
/* ChatGPT Ref: ./src/components/GameOver.js */
import React from 'react';
import '../css/GameOver.css';

const GameOver = () => {
  return (
    <div className="game-over-container">
      <h1>Game Over</h1>
    </div>
  );
};

export default GameOver;
/* ChatGPT Ref: ./src/components/HistoryScreen.js */
import React from 'react';

const HistoryScreen = () => {

  return (
    <div> 
    <h1>HISTORY SCREEN</h1>
    </div>
  );
};

export default HistoryScreen;
/* ChatGPT Ref: ./src/components/index.js */
import Splash from './Splash';
import GameOver from './GameOver';
import KanjiGame from './KanjiGame';
import AboutScreen from './AboutScreen';
import HistoryScreen from './HistoryScreen';
import NewGameScreen from './NewGameScreen';
import SettingsScreen from './SettingsScreen';

export {
  Splash,
  GameOver,
  KanjiGame,
  AboutScreen,
  HistoryScreen,
  NewGameScreen,
  SettingsScreen,
};
/* ChatGPT Ref: ./src/components/KanjiAnswerButtons.js */
import React, { useState } from 'react';
import '../css/KanjiAnswerButtons.css';

const KanjiAnswerButtons = ({ options, onClick }) => {
  const [selectedOption, setSelectedOption] = useState(null);

  const handleOptionClick = (option) => {
    setSelectedOption(option);
    onClick(option);
  };

  return (
    <div className="kanji-answer-buttons">
      {options.map((option, index) => (
        <button
          key={index}
          className={`kanji-answer-button ${selectedOption === option ? 'correct' : ''}`}
          onClick={() => handleOptionClick(option)}
        >
          {option}
        </button>
      ))}
    </div>
  );
};

export default KanjiAnswerButtons;
/* ChatGPT Ref: ./src/components/KanjiControls.js */
import React from 'react';

const KanjiControls = () => {
  return (
    <div className="container">
      <button className="button">Previous</button>
      <button className="button">Next</button>
      {/* Additional controls */}
    </div>
  );
};

export default KanjiControls;
/* ChatGPT Ref: ./src/components/kanjiData.js */
const kanjiData = [
  { ktype: 'number', kanji: '一', translation: 'one' },
  { ktype: 'number', kanji: '二', translation: 'two' },
  { ktype: 'number', kanji: '三', translation: 'three' },
  { ktype: 'number', kanji: '四', translation: 'four' },
  { ktype: 'number', kanji: '五', translation: 'five' },
  { ktype: 'number', kanji: '六', translation: 'six' },
  { ktype: 'number', kanji: '七', translation: 'seven' },
  { ktype: 'number', kanji: '八', translation: 'eight' },
  { ktype: 'number', kanji: '九', translation: 'nine' },
  { ktype: 'number', kanji: '十', translation: 'ten' },
  {
    kanji: '食',
    translation: 'food',
    ktype: 'food',
  },
  {
    kanji: '米',
    translation: 'rice',
    ktype: 'food',
  },
  {
    kanji: '肉',
    translation: 'meat',
    ktype: 'food',
  },
  {
    kanji: '野菜',
    translation: 'vegetables',
    ktype: 'food',
  },
  {
    kanji: '果物',
    translation: 'fruits',
    ktype: 'food',
  },
  {
    kanji: '牛乳',
    translation: 'milk',
    ktype: 'food',
  },
  {
    kanji: '卵',
    translation: 'egg',
    ktype: 'food',
  },
  {
    kanji: '麺',
    translation: 'noodles',
    ktype: 'food',
  },
  {
    kanji: '味噌',
    translation: 'miso',
    ktype: 'food',
  },
  {
    kanji: '豆腐',
    translation: 'tofu',
    ktype: 'food',
  },
  {
    kanji: '煮物',
    translation: 'stewed dish',
    ktype: 'food',
  },
  {
    kanji: '焼肉',
    translation: 'barbecue',
    ktype: 'food',
  },
  {
    kanji: '寿司',
    translation: 'sushi',
    ktype: 'food',
  },
  {
    kanji: '天ぷら',
    translation: 'tempura',
    ktype: 'food',
  },
  {
    kanji: '鍋',
    translation: 'hot pot',
    ktype: 'food',
  },
  {
    kanji: 'ラーメン',
    translation: 'ramen',
    ktype: 'food',
  },
  {
    kanji: 'カレー',
    translation: 'curry',
    ktype: 'food',
  },
  {
    kanji: 'おにぎり',
    translation: 'rice ball',
    ktype: 'food',
  },
  {
    kanji: 'お茶',
    translation: 'tea',
    ktype: 'food',
  },
  {
    kanji: 'コーヒー',
    translation: 'coffee',
    ktype: 'food',
  },
  {
    kanji: 'ケーキ',
    translation: 'cake',
    ktype: 'food',
  },
  {
    kanji: 'アイスクリーム',
    translation: 'ice cream',
    ktype: 'food',
  },
  {
    kanji: 'チョコレート',
    translation: 'chocolate',
    ktype: 'food',
  },
  {
    kanji: 'パン',
    translation: 'bread',
    ktype: 'food',
  },
  {
    kanji: 'バター',
    translation: 'butter',
    ktype: 'food',
  },
  {
    kanji: '酒',
    translation: 'sake',
    ktype: 'food',
  },
  {
    kanji: 'ビール',
    translation: 'beer',
    ktype: 'food',
  },
  {
    kanji: 'ワイン',
    translation: 'wine',
    ktype: 'food',
  },
  {
    kanji: '焼き鳥',
    translation: 'grilled chicken skewers',
    ktype: 'food',
  },
  {
    kanji: '天丼',
    translation: 'tempura rice bowl',
    ktype: 'food',
  },
  {
    kanji: 'お好み焼き',
    translation: 'okonomiyaki',
    ktype: 'food',
  },
  {
    kanji: '刺身',
    translation: 'sashimi',
    ktype: 'food',
  },
  {
    kanji: 'おでん',
    translation: 'oden',
    ktype: 'food',
  },
  {
    kanji: '焼きそば',
    translation: 'yakisoba',
    ktype: 'food',
  },
  {
    kanji: '牛肉',
    translation: 'beef',
    ktype: 'food',
  },
  {
    kanji: '豚肉',
    translation: 'pork',
    ktype: 'food',
  },
  {
    kanji: '鶏肉',
    translation: 'chicken',
    ktype: 'food',
  },
  {
    kanji: 'エビ',
    translation: 'shrimp',
    ktype: 'food',
  },
  {
    kanji: 'カニ',
    translation: 'crab',
    ktype: 'food',
  },
  {
    kanji: 'イカ',
    translation: 'squid',
    ktype: 'food',
  },
  {
    kanji: '貝',
    translation: 'shellfish',
    ktype: 'food',
  },
  {
    kanji: '野菜',
    translation: 'vegetables',
    ktype: 'food',
  },
  {
    kanji: '果物',
    translation: 'fruit',
    ktype: 'food',
  },
  { kanji: '蜘蛛', translation: 'spider', ktype: 'animals' },
  { kanji: '犬', translation: 'dog', ktype: 'animals' },
  { kanji: '猫', translation: 'cat', ktype: 'animals' },
  { kanji: '鳥', translation: 'bird', ktype: 'animals' },
  { kanji: '馬', translation: 'horse', ktype: 'animals' },
  { kanji: '牛', translation: 'cow', ktype: 'animals' },
  { kanji: '羊', translation: 'sheep', ktype: 'animals' },
  { kanji: '猿', translation: 'monkey', ktype: 'animals' },
  { kanji: '熊', translation: 'bear', ktype: 'animals' },
  { kanji: '虎', translation: 'tiger', ktype: 'animals' },
  { kanji: '魚', translation: 'fish', ktype: 'animals' },
  { kanji: '蛇', translation: 'snake', ktype: 'animals' },
  { kanji: '象', translation: 'elephant', ktype: 'animals' },
  { kanji: '兎', translation: 'rabbit', ktype: 'animals' },
  { kanji: '獅', translation: 'lion', ktype: 'animals' },
  { kanji: '豚', translation: 'pig', ktype: 'animals' },
  { kanji: '鹿', translation: 'deer', ktype: 'animals' },
  { kanji: '狐', translation: 'fox', ktype: 'animals' },
  { kanji: '狸', translation: 'raccoon', ktype: 'animals' },
  { kanji: '狼', translation: 'wolf', ktype: 'animals' },
  { kanji: '鼠', translation: 'rat', ktype: 'animals' },
  { kanji: '蝶', translation: 'butterfly', ktype: 'animals' },
  { kanji: '蛙', translation: 'frog', ktype: 'animals' },
  { kanji: '蜜蜂', translation: 'bee', ktype: 'animals' },
  { kanji: '獣', translation: 'beast', ktype: 'animals' },
  { kanji: '鷹', translation: 'hawk', ktype: 'animals' },
  { kanji: '鳩', translation: 'pigeon', ktype: 'animals' },
  { kanji: '鴉', translation: 'crow', ktype: 'animals' },
  { kanji: '蝙蝠', translation: 'bat', ktype: 'animals' },
  { kanji: '蛾', translation: 'moth', ktype: 'animals' },
  { kanji: '蜻蛉', translation: 'dragonfly', ktype: 'animals' },
  { kanji: '鯨', translation: 'whale', ktype: 'animals' },
  { kanji: '蝮', translation: 'viper', ktype: 'animals' },
  { kanji: '蝉', translation: 'cicada', ktype: 'animals' },
  { kanji: '鯛', translation: 'sea bream', ktype: 'animals' },
  { kanji: '蟷螂', translation: 'praying mantis', ktype: 'animals' },
  { kanji: '蚕', translation: 'silkworm', ktype: 'animals' },
  { kanji: '螺', translation: 'snail', ktype: 'animals' },
  { kanji: '蛤', translation: 'clam', ktype: 'animals' },
  { kanji: '螃蟹', translation: 'crab', ktype: 'animals' },
  { kanji: '鱈', translation: 'cod', ktype: 'animals' },
  { kanji: '鷹', translation: 'hawk', ktype: 'animals' },
  { kanji: '鴨', translation: 'duck', ktype: 'animals' },
  { kanji: '猪', translation: 'wild boar', ktype: 'animals' },
  { kanji: '鴎', translation: 'seagull', ktype: 'animals' },
  { kanji: '鮭', translation: 'salmon', ktype: 'animals' },
  { kanji: '蛇', translation: 'snake', ktype: 'animals' },
  { kanji: '鼠', translation: 'rat', ktype: 'animals' },
  { kanji: '貓', translation: 'cat', ktype: 'animals' },
  { kanji: '蝙蝠', translation: 'bat', ktype: 'animals' },
    { kanji: '鷺', translation: 'heron', ktype: 'animals' },
  { kanji: '蝶', translation: 'butterfly', ktype: 'animals' },
  { kanji: '机', translation: 'desk', ktype: 'office' },
  { kanji: '椅子', translation: 'chair', ktype: 'office' },
  { kanji: '書類', translation: 'documents', ktype: 'office' },
  { kanji: 'ノートパソコン', translation: 'laptop', ktype: 'office' },
  { kanji: 'モニター', translation: 'monitor', ktype: 'office' },
  { kanji: 'プリンター', translation: 'printer', ktype: 'office' },
  { kanji: 'ファイル', translation: 'file', ktype: 'office' },
  { kanji: 'ホワイトボード', translation: 'whiteboard', ktype: 'office' },
  { kanji: 'スマートフォン', translation: 'smartphone', ktype: 'office' },
  { kanji: 'カレンダー', translation: 'calendar', ktype: 'office' },
  { kanji: '机上灰皿', translation: 'desktop ashtray', ktype: 'office' },
  { kanji: '事務机', translation: 'office desk', ktype: 'office' },
  { kanji: '名刺', translation: 'business card', ktype: 'office' },
  { kanji: '応接セット', translation: 'reception set', ktype: 'office' },
  { kanji: 'サービスベル', translation: 'service bell', ktype: 'office' },
  { kanji: '計算機', translation: 'calculator', ktype: 'office' },
  { kanji: '会議室', translation: 'meeting room', ktype: 'office' },
  { kanji: 'ファックス', translation: 'fax machine', ktype: 'office' },
  { kanji: 'ステープラー', translation: 'stapler', ktype: 'office' },
  { kanji: '定規', translation: 'ruler', ktype: 'office' },
  { kanji: '財布', translation: 'wallet', ktype: 'office' },
  { kanji: 'ハンドクリーム', translation: 'hand cream', ktype: 'office' },
  { kanji: '押印', translation: 'seal stamp', ktype: 'office' },
  { kanji: '事務イス', translation: 'office chair', ktype: 'office' },
  { kanji: 'スキャナー', translation: 'scanner', ktype: 'office' },
  { kanji: 'チェアマット', translation: 'chair mat', ktype: 'office' },
  { kanji: 'データベース', translation: 'database', ktype: 'office' },
  { kanji: 'クリアファイル', translation: 'clear file', ktype: 'office' },
  { kanji: 'モニター', translation: 'monitor', ktype: 'office' },
  { kanji: 'トレイ', translation: 'tray', ktype: 'office' }

];


export default kanjiData;
/* ChatGPT Ref: ./src/components/KanjiDisplay.js */
import React from 'react';
import '../css/KanjiDisplay.css';
import kanjiData from './kanjiData';

const KanjiDisplay = ({ currentIndex, showTranslation }) => {
  const kanji = kanjiData[currentIndex].kanji;
  const translation = kanjiData[currentIndex].translation;
  const ktype = kanjiData[currentIndex].ktype;

  return (
    <div className="kanji-display-container">
      <div className="kanji-display-kanji">{kanji}</div>
      {showTranslation && <div>{translation}</div>}
    </div>
  );
};

export default KanjiDisplay;
/* ChatGPT Ref: ./src/components/KanjiGame.js */
import React, { useState } from 'react';
import '../css/KanjiGame.css';
import Menu from './Menu';
import NewGameScreen from './NewGameScreen';
import HistoryScreen from './HistoryScreen';
import SettingsScreen from './SettingsScreen';
import AboutScreen from './AboutScreen';

const KanjiGame = ({ onContinue }) => {
  const [activeScreen, setActiveScreen] = useState('');

  const handleScreenChange = (screen) => {
    setActiveScreen(screen);
  };

  return (
    <div className="kanjigame-container">
      <Menu onScreenChange={handleScreenChange} />
      <div className="kanjigame-content">
        <div className="white-rectangle">
          {activeScreen === 'newGame' && (
            <NewGameScreen onContinue={onContinue} />
          )}
          {activeScreen === 'history' && (
            <HistoryScreen onContinue={onContinue} />
          )}
          {activeScreen === 'settings' && (
            <SettingsScreen onContinue={onContinue} />
          )}
          {activeScreen === 'about' && <AboutScreen onContinue={onContinue} />}
        </div>
      </div>
    </div>
  );
};

export default KanjiGame;
/* ChatGPT Ref: ./src/components/Menu.js */
import React, { useState } from 'react';
import logo from '../images/logo.png';
import '../css/Menu.css';

const Menu = ({ onScreenChange }) => {
  const [rainbowMode, setRainbowMode] = useState(false);
  const [logoMove, setLogoMove] = useState(false);

  const handleAboutButtonClick = () => {
    setRainbowMode(!rainbowMode);
    onScreenChange('about');
  };

  const handleSettingsButtonClick = () => {
    setLogoMove(!logoMove);
    onScreenChange('settings');
  };

  const handleNewGameButtonClick = () => {
    onScreenChange('newGame');
  };

  const handleHistoryButtonClick = () => {
    onScreenChange('history');
  };

  return (
    <div className="menu-container">
      <div
        className={`logo-container ${logoMove ? 'logo-move' : ''}`}
        onAnimationEnd={() => setLogoMove(false)}
      >
        <img src={logo} alt="Logo" className="logo" />
      </div>
      <h2 className={rainbowMode ? 'rainbow-title' : ''}>Such Kanji!</h2>
      <button className="menu-button" onClick={handleNewGameButtonClick}>
        New Game
      </button>
      <button className="menu-button" onClick={handleHistoryButtonClick}>
        History
      </button>
      <button className="menu-button" onClick={handleSettingsButtonClick}>
        Settings
      </button>
      <button className="menu-button" onClick={handleAboutButtonClick}>
        About
      </button>
    </div>
  );
};

export default Menu;
/* ChatGPT Ref: ./src/components/NewGameScreen.js */
import React, { useState, useEffect } from 'react';
import KanjiDisplay from './KanjiDisplay';
import KanjiAnswerButtons from './KanjiAnswerButtons';
import KanjiControls from './KanjiControls';
import kanjiData from './kanjiData';

const NewGameScreen = () => {
  const [score, setScore] = useState(0);
  const [questionCount, setQuestionCount] = useState(0);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showTranslation, setShowTranslation] = useState(false);
  const [isAnswered, setIsAnswered] = useState(false);

  useEffect(() => {
    createQuestion(kanjiData);
  }, []);

  function randomIndex(dataLength) {
    const correctIndex = Math.floor(Math.random() * dataLength); // Random index for correct button

    let incorrectIndex1, incorrectIndex2;
    do {
      incorrectIndex1 = Math.floor(Math.random() * dataLength); // Random index for first incorrect button
    } while (incorrectIndex1 === correctIndex);

    do {
      incorrectIndex2 = Math.floor(Math.random() * dataLength); // Random index for second incorrect button
    } while (incorrectIndex2 === correctIndex || incorrectIndex2 === incorrectIndex1);

    return { correctIndex, incorrectIndex1, incorrectIndex2 };
  }

  function createQuestion(data) {
    const dataLength = data.length;
    const { correctIndex, incorrectIndex1, incorrectIndex2 } = randomIndex(dataLength);

    setCurrentIndex(correctIndex);
    setShowTranslation(false);
    setIsAnswered(false);
  }

  const handleAnswerClick = (selectedOption) => {
    if (selectedOption === kanjiData[currentIndex].translation) {
      setScore(score + 1);
      setIsAnswered(true);
    } else {
      setIsAnswered(false);
    }
    setShowTranslation(true);
    setQuestionCount(questionCount + 1);
    setTimeout(() => {
      if (questionCount === 9) {
        // Game over, show alert
        alert('Game Over');
      } else {
        createQuestion(kanjiData);
      }
    }, 500);
  };

  const handleRandomClick = () => {
    createQuestion(kanjiData);
  };

  return (
    <div>
      <KanjiDisplay currentIndex={currentIndex} showTranslation={showTranslation} />
      <KanjiAnswerButtons
        options={[
          kanjiData[currentIndex].translation,
          kanjiData[randomIndex(kanjiData.length).incorrectIndex1].translation,
          kanjiData[randomIndex(kanjiData.length).incorrectIndex2].translation
        ]}
        onClick={handleAnswerClick}
        isAnswered={isAnswered}
      />
      <KanjiControls />
      <button onClick={handleRandomClick}>Random</button>
    </div>
  );
};

export default NewGameScreen;
/* ChatGPT Ref: ./src/components/SettingsScreen.js */
import React from 'react';

const SettingsScreen = () => {

  return (
    <div> 
    <h1>SETTINGS SCREEN</h1>
    </div>
  );
};

export default SettingsScreen;
/* ChatGPT Ref: ./src/components/Splash.js */
import React from 'react';
import '../css/Splash.css';

const Splash = ({ onContinue }) => {
  const handleContinue = () => {
    onContinue();
  };

  return (
    <div className="splash-container">
      <div className="splash-content">
        <h1>Welcome to Kanji Learning App</h1>
        <button className="continue-button" onClick={handleContinue}>
          Continue
        </button>
      </div>
    </div>
  );
};

export default Splash;
/* ChatGPT Ref: ./src/css/AboutScreen.css */
.about-screen {
  padding: 0 5%;
}
/* ChatGPT Ref: ./src/css/GameOver.css */
.game-over-container {
}
/* ChatGPT Ref: ./src/css/KanjiAnswerButtons.css */
.kanji-answer-buttons {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  margin-top: 10px;
}

.kanji-answer-button {
  background-color: lightgreen;
  color: black;
  font-size: 1.44rem; /* 20% larger font size */
  border: none;
  padding: 12px 24px; /* 20% larger padding */
  margin: 5px;
  cursor: pointer;
  border-radius: 15px; /* Rounded corners with 15px radius */
}

.kanji-answer-button.correct {
  background-color: darkgreen; /* Dark green background for the correct answer button */
  color: white; /* White text color for the correct answer button */
}

.kanji-answer-button.incorrect {
  background-color: darkred; /* Dark green background for the correct answer button */
  color: white; /* White text color for the correct answer button */
}
/* ChatGPT Ref: ./src/css/KanjiDisplay.css */
.kanji-display-container {
  width: 100%;
  height: 200px;
  background-color: lightblue;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.kanji-display-kanji {
  font-size: 72px;
}

.kanji-display-button {
  margin-top: 16px;
  padding: 8px 16px;
  font-size: 16px;
  background-color: #f1f1f1;
  border: none;
  cursor: pointer;
}
/* ChatGPT Ref: ./src/css/KanjiGame.css */
.kanjigame-container {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-image: url('../images/kanjigame.png');
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
}

.kanjigame-content {
    position: absolute;
    left: 20%;
    top: 20%;
  width: 60%;
  height: 65%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.white-rectangle {
  width: 100%;
  height: 100%;
  background-color: white;
  opacity: 0.8;
}
/* ChatGPT Ref: ./src/css/Menu.css */
.menu-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 15%;
  height: 50%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 10px;
}

.logo-container {
  margin-top: 20px;
}

.logo {
  width: 90%; /* Adjust the width of the logo as needed */
  height: auto;
}

.menu-button {
  display: block;
  width: 100%;
  padding: 10px;
  margin: 10px;
  background: linear-gradient(135deg, #8a4fff, #4c00e6);
  color: white;
  border: none;
  border-radius: 15px;
  cursor: pointer;
  transition: background 0.3s ease;
  height: 60px; /* Updated height */
  line-height: 40px; /* Added line-height for vertical alignment */
  font-size: 30px;
}
.menu-button:hover {
  background: linear-gradient(135deg, #a470ff, #5d1ad6);
}

.rainbow-title {
  animation: rainbow 5s linear infinite;
}

@keyframes rainbow {
  0% {
    color: red;
  }
  14% {
    color: orange;
  }
  28% {
    color: yellow;
  }
  42% {
    color: green;
  }
  57% {
    color: blue;
  }
  71% {
    color: indigo;
  }
  85% {
    color: violet;
  }
  100% {
    color: red;
  }
}

.logo-move {
  animation: logoMovement 5s linear;
}

@keyframes logoMovement {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(100%, 0);
  }
}
/* ChatGPT Ref: ./src/css/Splash.css */
.splash-container {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-image: url('../images/splash.png');
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  z-index: 1;
}

.splash-content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100%;
}

.continue-button {
  margin-top: 20px;
  padding: 10px 20px;
  font-size: 20px;
}
/* ChatGPT Ref: ./src/index.css */
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
/* ChatGPT Ref: ./src/index.js */
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
/* ChatGPT Ref: ./src/reportWebVitals.js */
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
/* ChatGPT Ref: ./src/setupTests.js */
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


